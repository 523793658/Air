#include "Engine.h"
#include "ElementFormat.h"
#include "boost/functional/hash.hpp"

namespace Air
{
	ElementFormat parseFormat(std::string formatStr)
	{
		size_t hash_value = boost::hash_range(formatStr.begin(), formatStr.end());
		switch (hash_value)
		{
		case CT_HASH("EF_A8"):
			return EF_A8;
		case CT_HASH("EF_R5G6B5"):
			return EF_R5G6B5;
		case CT_HASH("EF_A1RGB5"):
			return EF_A1RGB5;
		case CT_HASH("EF_ARGB4"):
			return EF_ARGB4;
		case CT_HASH("EF_R8"):
			return EF_R8;
		case CT_HASH("EF_SIGNED_R8"):
			return EF_SIGNED_R8;
		case CT_HASH("EF_GR8"):
			return EF_GR8;
		case CT_HASH("EF_SIGNED_GR8"):
			return EF_SIGNED_GR8;
		case CT_HASH("EF_BGR8"):
			return EF_BGR8;
		case CT_HASH("EF_SIGNED_BGR8"):
			return EF_SIGNED_BGR8;
		case CT_HASH("EF_ARGB8"):
			return EF_ARGB8;
		case CT_HASH("EF_ABGR8"):
			return EF_ABGR8;
		case CT_HASH("EF_A2BGR10"):
			return EF_A2BGR10;
		case CT_HASH("EF_SIGNED_A2BGR10"):
			return EF_SIGNED_A2BGR10;
		case CT_HASH("EF_R8UI"):
			return EF_R8UI;
		case CT_HASH("EF_R8I"):
			return EF_R8I;
		case CT_HASH("EF_GR8UI"):
			return EF_GR8UI;
		case CT_HASH("EF_GR8I"):
			return EF_GR8I;
		case CT_HASH("EF_BGR8UI"):
			return EF_BGR8UI;
		case CT_HASH("EF_BGR8I"):
			return EF_BGR8I;
		case CT_HASH("EF_ABGR8UI"):
			return EF_ABGR8UI;
		case CT_HASH("EF_ABGR8I"):
			return EF_ABGR8I;
		case CT_HASH("EF_A2BGR10UI"):
			return EF_A2BGR10UI;
		case CT_HASH("EF_A2BGR10I"):
			return EF_A2BGR10I;
		case CT_HASH("EF_R16"):
			return EF_R16;
		case CT_HASH("EF_SIGNED_R16"):
			return EF_SIGNED_R16;
		case CT_HASH("EF_GR16"):
			return EF_GR16;
		case CT_HASH("EF_SIGNED_GR16"):
			return EF_SIGNED_GR16;
		case CT_HASH("EF_BGR16"):
			return EF_BGR16;
		case CT_HASH("EF_SIGNED_BGR16"):
			return EF_SIGNED_BGR16;
		case CT_HASH("EF_ABGR16"):
			return EF_ABGR16;
		case CT_HASH("EF_SIGNED_ABGR16"):
			return EF_SIGNED_ABGR16;
		case CT_HASH("EF_R32"):
			return EF_R32;
		case CT_HASH("EF_SIGNED_R32"):
			return EF_SIGNED_R32;
		case CT_HASH("EF_GR32"):
			return EF_GR32;
		case CT_HASH("EF_SIGNED_GR32"):
			return EF_SIGNED_GR32;
		case CT_HASH("EF_SIGNED_BGR32"):
			return EF_SIGNED_BGR32;
		case CT_HASH("EF_ABGR32"):
			return EF_ABGR32;
		case CT_HASH("EF_SIGNED_ABGR32"):
			return EF_SIGNED_ABGR32;
		case CT_HASH("EF_R16UI"):
			return EF_R16UI;
		case CT_HASH("EF_R16I"):
			return EF_R16I;
		case CT_HASH("EF_GR16UI"):
			return EF_GR16UI;
		case CT_HASH("EF_GR16I"):
			return EF_GR16I;
		case CT_HASH("EF_BGR16UI"):
			return EF_BGR16UI;
		case CT_HASH("EF_BGR16I"):
			return EF_BGR16I;
		case CT_HASH("EF_ABGR16UI"):
			return EF_ABGR16UI;
		case CT_HASH("EF_ABGR16I"):
			return EF_ABGR16I;
		case CT_HASH("EF_R32UI"):
			return EF_R32UI;
		case CT_HASH("EF_R32I"):
			return EF_R32I;
		case CT_HASH("EF_GR32UI"):
			return EF_GR32UI;
		case CT_HASH("EF_GR32I"):
			return EF_GR32I;
		case CT_HASH("EF_BGR32UI"):
			return EF_BGR32UI;
		case CT_HASH("EF_BGR32I"):
			return EF_BGR32I;
		case CT_HASH("EF_ABGR32UI"):
			return EF_ABGR32UI;
		case CT_HASH("EF_ABGR32I"):
			return EF_ABGR32I;
		case CT_HASH("EF_R16F"):
			return EF_R16F;
		case CT_HASH("EF_GR16F"):
			return EF_GR16F;
		case CT_HASH("EF_B10G11R11F"):
			return EF_B10G11R11F;
		case CT_HASH("EF_BGR16F"):
			return EF_BGR16F;
		case CT_HASH("EF_ABGR16F"):
			return EF_ABGR16F;
		case CT_HASH("EF_R32F"):
			return EF_R32F;
		case CT_HASH("EF_GR32F"):
			return EF_GR32F;
		case CT_HASH("EF_BGR32F"):
			return EF_BGR32F;
		case CT_HASH("EF_ABGR32F"):
			return EF_ABGR32F;
		case CT_HASH("EF_BC1"):
			return EF_BC1;
		case CT_HASH("EF_SIGNED_BC1"):
			return EF_SIGNED_BC1;
		case CT_HASH("EF_BC2"):
			return EF_BC2;
		case CT_HASH("EF_SIGNED_BC2"):
			return EF_SIGNED_BC2;
		case CT_HASH("EF_BC3"):
			return EF_BC3;
		case CT_HASH("EF_SIGNED_BC3"):
			return EF_SIGNED_BC3;
		case CT_HASH("EF_BC4"):
			return EF_BC4;
		case CT_HASH("EF_SIGNED_BC4"):
			return EF_SIGNED_BC4;
		case CT_HASH("EF_BC5"):
			return EF_BC5;
		case CT_HASH("EF_SIGNED_BC5"):
			return EF_SIGNED_BC5;
		case CT_HASH("EF_BC6"):
			return EF_BC6;
		case CT_HASH("EF_SIGNED_BC6"):
			return EF_SIGNED_BC6;
		case CT_HASH("EF_BC7"):
			return EF_BC7;
		case CT_HASH("EF_ETC1"):
			return EF_ETC1;
		case CT_HASH("EF_ETC2_R11"):
			return EF_ETC2_R11;
		case CT_HASH("EF_SIGNED_ETC2_R11"):
			return EF_SIGNED_ETC2_R11;
		case CT_HASH("EF_ETC2_GR11"):
			return EF_ETC2_GR11;
		case CT_HASH("EF_SIGNED_ETC2_GR11"):
			return EF_SIGNED_ETC2_GR11;
		case CT_HASH("EF_ETC2_BGR8"):
			return EF_ETC2_BGR8;
		case CT_HASH("EF_ETC2_BGR8_SRGB"):
			return EF_ETC2_BGR8_SRGB;
		case CT_HASH("EF_ETC2_A1BGR8"):
			return EF_ETC2_A1BGR8;
		case CT_HASH("EF_ETC2_A1BGR8_SRGB"):
			return EF_ETC2_A1BGR8_SRGB;
		case CT_HASH("EF_ETC2_ABGR8"):
			return EF_ETC2_ABGR8;
		case CT_HASH("EF_ETC2_ABGR8_SRGB"):
			return EF_ETC2_ABGR8_SRGB;
		case CT_HASH("EF_D16"):
			return EF_D16;
		case CT_HASH("EF_D24S8"):
			return EF_D24S8;
		case CT_HASH("EF_D32F"):
			return EF_D32F;
		case CT_HASH("EF_ARGB8_SRGB"):
			return EF_ARGB8_SRGB;
		case CT_HASH("EF_ABGR8_SRGB"):
			return EF_ABGR8_SRGB;
		case CT_HASH("EF_BC1_SRGB"):
			return EF_BC1_SRGB;
		case CT_HASH("EF_BC2_SRGB"):
			return EF_BC2_SRGB;
		case CT_HASH("EF_BC3_SRGB"):
			return EF_BC3_SRGB;
		case CT_HASH("EF_BC4_SRGB"):
			return EF_BC4_SRGB;
		case CT_HASH("EF_BC5_SRGB"):
			return EF_BC5_SRGB;
		case CT_HASH("EF_BC7_SRGB"):
			return EF_BC7_SRGB;
		default:
			AIR_UNREACHABLE("Invalid Format name");
			break;
		}
		return EF_ABGR32F;
	}
}